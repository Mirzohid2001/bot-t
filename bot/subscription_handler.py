# subscription_handler.py
import logging
import requests
from requests.exceptions import RequestException
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
import httpx

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ other_handlers.py
from other_handlers import show_main_menu, go_back_to_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# URL API –±—ç–∫–µ–Ω–¥–∞
BACKEND_API_BASE_URL = "http://localhost:8000/blog"  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# -------------------------------
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
# -------------------------------
SELECT_PLAN, SELECT_PAYMENT_METHOD, ENTER_PAYMENT_DETAILS, \
SELECT_GIFT_RECIPIENT, SELECT_GIFT_PLAN, SELECT_GIFT_PAYMENT_METHOD, \
ENTER_GIFT_PAYMENT_DETAILS, SHOW_FAQ, SHOW_FAQ_ANSWER, SEND_SUPPORT_MESSAGE = range(10)

# -------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
# -------------------------------

async def show_subscription_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    query = update.callback_query
    await query.answer()

    api_url = f"{BACKEND_API_BASE_URL}/subscription-plans/"
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        plans = response.json()

        keyboard = [
            [InlineKeyboardButton(plan["name"], callback_data=f"select_plan_{plan['id']}")]
            for plan in plans
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup
        )
        return SELECT_PLAN
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def select_subscription_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞–Ω–∞ –∏–∑ callback_data
    plan_id = query.data.split("_")[-1]
    context.user_data["selected_plan_id"] = plan_id

    api_url = f"{BACKEND_API_BASE_URL}/payment-methods/"
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        methods = response.json()

        keyboard = [
            [InlineKeyboardButton(method["name"], callback_data=f"select_method_{method['id']}")]
            for method in methods
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_plans")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup
        )
        return SELECT_PAYMENT_METHOD
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def select_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
    method_id = query.data.split("_")[-1]
    context.user_data["selected_method_id"] = method_id

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_methods")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)
    return ENTER_PAYMENT_DETAILS


async def enter_payment_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±—ç–∫–µ–Ω–¥.
    """
    user = update.message.from_user
    card_number = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if not card_number.isdigit() or not (13 <= len(card_number) <= 19):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ENTER_PAYMENT_DETAILS

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    plan_id = context.user_data.get("selected_plan_id")
    method_id = context.user_data.get("selected_method_id")

    api_url = f"{BACKEND_API_BASE_URL}/make-payment/{user.id}/"
    data = {
        "subscription_plan": plan_id,
        "payment_method": method_id,
        "transaction_id": card_number
    }

    try:
        response = requests.post(api_url, json=data)
        response.raise_for_status()

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏!", reply_markup=reply_markup)
        await show_main_menu(update, context)
        return ConversationHandler.END
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# -------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
# -------------------------------

async def start_gifting_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è username –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üéÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):"
    )
    return SELECT_GIFT_RECIPIENT


async def select_gift_recipient(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    recipient_username = update.message.text.strip()
    if not recipient_username.startswith('@') or len(recipient_username) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @."
        )
        return SELECT_GIFT_RECIPIENT

    context.user_data["recipient_username"] = recipient_username

    api_url = f"{BACKEND_API_BASE_URL}/subscription-plans/"
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        plans = response.json()

        keyboard = [
            [InlineKeyboardButton(plan["name"], callback_data=f"select_gift_plan_{plan['id']}")]
            for plan in plans
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üéÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å:",
            reply_markup=reply_markup
        )
        return SELECT_GIFT_PLAN
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def select_gift_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞–Ω–∞ –∏–∑ callback_data
    plan_id = query.data.split("_")[-1]
    context.user_data["selected_plan_id"] = plan_id

    api_url = f"{BACKEND_API_BASE_URL}/payment-methods/"
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        methods = response.json()

        keyboard = [
            [InlineKeyboardButton(method["name"], callback_data=f"select_gift_method_{method['id']}")]
            for method in methods
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_gift_plans")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup
        )
        return SELECT_GIFT_PAYMENT_METHOD
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def select_gift_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
    method_id = query.data.split("_")[-1]
    context.user_data["selected_method_id"] = method_id

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_gift_methods")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)
    return ENTER_GIFT_PAYMENT_DETAILS


async def enter_gift_payment_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±—ç–∫–µ–Ω–¥.
    """
    user = update.message.from_user
    card_number = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if not card_number.isdigit() or not (13 <= len(card_number) <= 19):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ENTER_GIFT_PAYMENT_DETAILS

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    recipient_username = context.user_data.get("recipient_username")
    plan_id = context.user_data.get("selected_plan_id")
    method_id = context.user_data.get("selected_method_id")
    api_url = f"{BACKEND_API_BASE_URL}/gift-subscription/{user.id}/"
    data = {
        "subscription_plan": plan_id,
        "payment_method": method_id,
        "recipient_username": recipient_username,
        "transaction_id": card_number  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    }

    try:
        response = requests.post(api_url, json=data)
        response.raise_for_status()

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üéÅ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_username}! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.",
            reply_markup=reply_markup
        )
        await show_main_menu(update, context)
        return ConversationHandler.END
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# -------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
# -------------------------------

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ FAQ_ITEMS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ other_handlers.py
# –ï—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ç–∞–º, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å—é–¥–∞
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª–∏–º –∏—Ö –∑–¥–µ—Å—å

FAQ_ITEMS = [
    {
        "question": "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
        "answer": "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–±—Ä–∞–≤ –æ–ø—Ü–∏—é '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    },
    {
        "question": "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?",
        "answer": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç', —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
    },
    # –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ FAQ –ø—É–Ω–∫—Ç—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    keyboard = [
        [InlineKeyboardButton(item["question"], callback_data=f"faq_{index}")]
        for index, item in enumerate(FAQ_ITEMS)
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="send_support_message")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*", parse_mode='Markdown', reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*", parse_mode='Markdown', reply_markup=reply_markup)

    return SHOW_FAQ


async def show_faq_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ FAQ.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    index = int(query.data.split("_")[-1])
    faq_item = FAQ_ITEMS[index]

    keyboard = [
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="show_faq")],
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="send_support_message")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"**{faq_item['question']}**\n\n{faq_item['answer']}",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return SHOW_FAQ_ANSWER


async def initiate_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—è FAQ.
    """
    await show_faq(update, context)
    return SHOW_FAQ


async def send_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
    """
    await show_support_message_prompt(update, context)
    return SEND_SUPPORT_MESSAGE


async def show_support_message_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
    """
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:*",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:*",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def start_support_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è FAQ.
    """
    try:
        query = update.callback_query
        await query.answer()

        user = query.from_user
        telegram_id = user.id

        logger.debug(f"–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è telegram_id: {telegram_id}")

        api_url = f"{BACKEND_API_BASE_URL}/support/start-session/{telegram_id}/"

        response = requests.post(api_url)
        response.raise_for_status()
        data = response.json()
        session_id = data.get("session_id")

        if not session_id:
            logger.error("–ù–µ –ø–æ–ª—É—á–µ–Ω session_id –æ—Ç –±—ç–∫–µ–Ω–¥–∞.")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

        context.user_data["support_session_id"] = session_id

        logger.debug(f"–°–µ—Å—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—á–∞—Ç–∞ —Å session_id: {session_id}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞—è FAQ
        await show_faq(update, context)
        return SHOW_FAQ

    except requests.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await update.callback_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_support_session: {e}")
        await update.callback_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


# -------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
# -------------------------------

async def process_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±—ç–∫–µ–Ω–¥.
    """
    message_text = update.message.text.strip()
    session_id = context.user_data.get("support_session_id")
    user = update.message.from_user
    sender = (user.username or user.first_name)[:255]

    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: session_id={session_id}, sender={sender}, message_text={message_text}")

    if not session_id:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.")
        return ConversationHandler.END

    api_url = f"{BACKEND_API_BASE_URL}/support/send-message/"
    data = {
        "session_id": session_id,
        "sender": sender,
        "message_text": message_text
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(api_url, json=data)
            response.raise_for_status()

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.",
                reply_markup=reply_markup
            )
            return SEND_SUPPORT_MESSAGE
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            try:
                error_message = response.json().get('error', "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.message.reply_text(f"{error_message}")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

# -------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ "–ù–∞–∑–∞–¥"
# -------------------------------

async def go_back_to_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    query = update.callback_query
    await query.answer()
    await show_subscription_plans(update, context)
    return SELECT_PLAN


async def go_back_to_methods(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.
    """
    query = update.callback_query
    await query.answer()

    api_url = f"{BACKEND_API_BASE_URL}/payment-methods/"
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        methods = response.json()

        keyboard = [
            [InlineKeyboardButton(method["name"], callback_data=f"select_method_{method['id']}")]
            for method in methods
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_plans")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup
        )
        return SELECT_PAYMENT_METHOD
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def go_back_to_gift_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.
    """
    query = update.callback_query
    await query.answer()
    await select_gift_recipient(update, context)
    return SELECT_GIFT_PLAN


async def go_back_to_gift_methods(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.
    """
    query = update.callback_query
    await query.answer()

    api_url = f"{BACKEND_API_BASE_URL}/payment-methods/"
    try:
        response = requests.get(api_url)
        response.raise_for_status()
        methods = response.json()

        keyboard = [
            [InlineKeyboardButton(method["name"], callback_data=f"select_gift_method_{method['id']}")]
            for method in methods
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back_to_gift_plans")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup
        )
        return SELECT_GIFT_PAYMENT_METHOD
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# -------------------------------
# Conversation Handler –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
# -------------------------------

subscription_conversation_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(show_subscription_plans, pattern="^select_plan$"),
        CallbackQueryHandler(start_gifting_subscription, pattern="^gift_subscription$"),
        CallbackQueryHandler(start_support_session, pattern="^support$")
    ],
    states={
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        SELECT_PLAN: [
            CallbackQueryHandler(select_subscription_plan, pattern="^select_plan_\\d+$"),
            CallbackQueryHandler(go_back_to_menu, pattern="^go_back_to_menu$"),
        ],
        SELECT_PAYMENT_METHOD: [
            CallbackQueryHandler(select_payment_method, pattern="^select_method_\\d+$"),
            CallbackQueryHandler(go_back_to_plans, pattern="^go_back_to_plans$"),
        ],
        ENTER_PAYMENT_DETAILS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_payment_details),
            CallbackQueryHandler(go_back_to_methods, pattern="^go_back_to_methods$"),
        ],
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        SELECT_GIFT_RECIPIENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_gift_recipient),
        ],
        SELECT_GIFT_PLAN: [
            CallbackQueryHandler(select_gift_plan, pattern="^select_gift_plan_\\d+$"),
            CallbackQueryHandler(go_back_to_menu, pattern="^go_back_to_menu$"),
        ],
        SELECT_GIFT_PAYMENT_METHOD: [
            CallbackQueryHandler(select_gift_payment_method, pattern="^select_gift_method_\\d+$"),
            CallbackQueryHandler(go_back_to_gift_plans, pattern="^go_back_to_gift_plans$"),
        ],
        ENTER_GIFT_PAYMENT_DETAILS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_gift_payment_details),
            CallbackQueryHandler(go_back_to_gift_methods, pattern="^go_back_to_gift_methods$"),
        ],
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        SHOW_FAQ: [
            CallbackQueryHandler(show_faq, pattern="^show_faq$"),
            CallbackQueryHandler(show_faq_answer, pattern="^faq_\\d+$"),
            CallbackQueryHandler(send_support_message, pattern="^send_support_message$"),
            CallbackQueryHandler(go_back_to_menu, pattern="^go_back_to_menu$")
        ],
        SHOW_FAQ_ANSWER: [
            CallbackQueryHandler(show_faq, pattern="^show_faq$"),
            CallbackQueryHandler(show_faq_answer, pattern="^faq_\\d+$"),
            CallbackQueryHandler(send_support_message, pattern="^send_support_message$"),
            CallbackQueryHandler(go_back_to_menu, pattern="^go_back_to_menu$")
        ],
        SEND_SUPPORT_MESSAGE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_support_message),
            CallbackQueryHandler(go_back_to_menu, pattern="^go_back_to_menu$")
        ],
    },
    fallbacks=[
        CallbackQueryHandler(go_back_to_menu, pattern="^go_back_to_menu$"),
        CallbackQueryHandler(go_back_to_plans, pattern="^go_back_to_plans$"),
        CallbackQueryHandler(go_back_to_methods, pattern="^go_back_to_methods$"),
        CallbackQueryHandler(go_back_to_gift_plans, pattern="^go_back_to_gift_plans$"),
        CallbackQueryHandler(go_back_to_gift_methods, pattern="^go_back_to_gift_methods$"),
    ],
)
